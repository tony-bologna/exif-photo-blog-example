'use client';

/* eslint-disable jsx-a11y/alt-text */
import { BLUR_ENABLED } from '@/site/config';
import { clsx}  from 'clsx/lite';
import Image, { ImageProps } from 'next/image';
import { useEffect, useRef, useState } from 'react';

export default function ImageBlurFallback(props: ImageProps) {
  const {
    className,
    priority,
    blurDataURL,
    ...rest
  } = props;

  const [isLoading, setIsLoading] = useState(false);
  const [didLoad, setDidLoad] = useState(false);
  const [hideBlurPlaceholder, setHideBlurPlaceholder] = useState(false);

  const imageClassName = 'object-cover h-full';

  const imgRef = useRef<HTMLImageElement>(null);

  useEffect(() => {
    const timeout = setTimeout(() =>
      setIsLoading(imgRef.current?.complete !== true)
    , 100);
    return () => clearTimeout(timeout);
  }, []);

  useEffect(() => {
    if (didLoad) {
      const timeout = setTimeout(() =>
        setHideBlurPlaceholder(true)
      , 500);
      return () => clearTimeout(timeout);
    }
  }, [didLoad]);

  const showPlaceholder =
    BLUR_ENABLED &&
    props.blurDataURL &&
    !hideBlurPlaceholder;

  return (
    <div
      className={clsx(
        className,
        'flex relative overflow-hidden',
        'bg-gray-100/50 dark:bg-gray-900/50',
      )}
    >
      <Image {...{
        ...rest,
        ref: imgRef,
        priority,
        className: clsx(
          imageClassName,
          'relative z-10',
          'transition-opacity duration-300 ease-in',
          isLoading ? 'opacity-0' : 'opacity-100',
        ),
        onLoad: () => {
          setIsLoading(false);
          setDidLoad(true);
        },
        onError: () => {
          setIsLoading(false);
        },
      }} />
      {showPlaceholder &&
        <img {...{
          ...rest,
          src: blurDataURL,
          className: clsx(
            imageClassName,
            'absolute z-[1] top-0 left-0',
            // Fix poorly blurred placeholder data generated by Safari
            'blur-md scale-110',
          ),
        }} />}
    </div>
  );
}
